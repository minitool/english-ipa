{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","e","response","data","postOption","wrap","_context","prev","next","voice","text","target","value","method","headers","content-type","JSON","stringify","url","console","log","axios","sent","setTimeout","setState","audioUrl","concat","refs","audio","pause","load","play","t0","stop","_x","apply","arguments","state","originText","translatedText","undefined","handleChange","bind","assertThisInitialized","translate","origin","arrayWord","split","translateArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","word","push","dict","toLowerCase","err","return","join","displaying","react_default","createElement","controls","src","type","className","onChange","readOnly","onClick","style","display","ref","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc77c40a.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nimport \"./App.css\";\n\nimport dict from \"./dict.json\";\n\nconst API = \"https://otvyoym3th.execute-api.ap-southeast-1.amazonaws.com/dev\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      originText: \"\",\n      translatedText: \"\",\n      audioUrl: undefined\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    // await this.handleSubmit();\n  }\n\n\n  handleChange(e) {\n    const origin = e.target.value;\n    const arrayWord = origin.split(/\\s+/g);\n\n    let translateArray = [];\n    let translate;\n\n    for (const word of arrayWord) {\n      translateArray.push(dict[word.toLowerCase()] || word);\n    }\n    translate = translateArray.join(\" \");\n\n    this.setState({\n      originText: origin,\n      translatedText: translate\n    });\n  }\n\n  handleSubmit = async (e) => {\n    let response;\n    const data = {\n      voice: \"Joanna\",\n      text: e.target.value,\n    };\n    const postOption = {\n      method: \"POST\",\n      headers: { \"content-type\": \"application/json\" },\n      data: JSON.stringify(data),\n      url: API\n    };\n    console.log(postOption)\n    try {\n      response = await axios(postOption);\n      console.log(response);\n      setTimeout(() => {\n        this.setState({\n          audioUrl: `https://s3-ap-southeast-1.amazonaws.com/text-to-speech-english/${response.data}.mp3`\n        })\n        this.refs.audio.pause();\n        this.refs.audio.load();\n        this.refs.audio.play();\n      }, 1600);\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    let audio;\n    let displaying = 'none';\n    if (this.state.audioUrl) {\n      audio = (\n        <audio controls>\n          <source src={this.state.audioUrl} type=\"audio/mpeg\" />\n        </audio>\n      );\n      displaying = true;\n    }\n    return (\n      <center className=\"container\">\n        <textarea className=\"originText\" onChange={this.handleChange} />\n        <br />\n        <textarea\n          className=\"translatedText\"\n          value={this.state.translatedText}\n          readOnly\n        />\n        <br />\n        <button type=\"submit\" onClick={this.handleSubmit} value={this.state.originText}>\n          Speak it\n        </button>\n        <br />\n        <h3>Pass your text in the text area, example: My name is Giang</h3>\n        <br />\n        <audio controls style={{display:displaying}} ref=\"audio\">\n          <source src={this.state.audioUrl} type=\"audio/mpeg\" />\n        </audio>\n        <br />\n      </center>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}